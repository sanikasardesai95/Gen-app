steps:
  # Step 1: Check if the cluster exists
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud container clusters describe my-cluster --zone us-central1-a --project $PROJECT_ID; then
          echo "Cluster does not exist. Creating cluster."
          gcloud container clusters create my-cluster \
              --zone us-central1-a \
              --num-nodes 3 \
              --enable-autoscaling --min-nodes=1 --max-nodes=5 \
              --scopes "https://www.googleapis.com/auth/cloud-platform"
        else
          echo "Cluster exists. Proceeding with deployment."
        fi

  # Step 2: Configure kubectl to use the cluster
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud container clusters get-credentials my-cluster --zone us-central1-a --project $PROJECT_ID

  # Step 3: Create the namespaces if they don't exist
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        kubectl get namespace dev || kubectl create namespace dev
        kubectl get namespace prod || kubectl create namespace prod

  # Step 4: Build the Docker image using Cloud Build
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/text-generator:latest', '.']

  # Step 5: Push the Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/text-generator:latest']

  # Step 6: Deploy to dev environment using Skaffold
  - name: 'gcr.io/k8s-skaffold/skaffold:v2.13.1'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        skaffold run --default-repo=gcr.io/$PROJECT_ID --profile=dev

  # Step 7: Create a release in Cloud Deploy for dev
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud deploy releases create text-generator-release-dev-$(date +%Y%m%d%H%M%S) \
        --delivery-pipeline=text-generator-pipeline \
        --region=us-central1 \
        --images=gcr.io/$PROJECT_ID/text-generator=gcr.io/$PROJECT_ID/text-generator:latest \
        --to-target=dev

  # Step 8: Deploy to prod environment using Skaffold
  - name: 'gcr.io/k8s-skaffold/skaffold:v2.13.1'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        skaffold run --default-repo=gcr.io/$PROJECT_ID --profile=prod

  # Step 9: Create a release in Cloud Deploy for prod
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud deploy releases create text-generator-release-prod-$(date +%Y%m%d%H%M%S) \
        --delivery-pipeline=text-generator-pipeline \
        --region=us-central1 \
        --images=gcr.io/$PROJECT_ID/text-generator=gcr.io/$PROJECT_ID/text-generator:latest \
        --to-target=prod

images:
  - 'gcr.io/$PROJECT_ID/text-generator:latest'
options:
  logging: CLOUD_LOGGING_ONLY
substitutions:
  _PROJECT_ID: "ethereal-smoke-422723-i0"
